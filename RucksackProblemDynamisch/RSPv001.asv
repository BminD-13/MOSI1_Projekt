clear
close all
clc
%% Data

% knapsack data
knapsackCapacity = 7;

% item data
Capacity = [3,1,3,4,2]';
Value = [2,2,4,5,3]';

item = table(Capacity, Value);

[a,b,c] = knapsackDynamic(knapsackCapacity, item);

%% knapsack dynamic algorithm
function [valueMax, sumTable, itemsPicked] = knapsackDynamic(knapsackCapacity, item)

%% declaration
itemCount = length(item.Capacity);
itemsPicked = [];
sumTable = zeros(length(item.Capacity) + 1,knapsackCapacity);

%% filling the knapsack table with the information 

% iterate rows (items) of the table
    for iRowAbove = 1:itemCount
        iRowActual = iRowAbove +1;

    % iterate columns (knapsackCapacity) of the table
        for iColumnActual = 1:knapsackCapacity+1        

        % knapsack Capacity smaller than item capacity
            if iColumnActual <= item.Capacity(iRowAbove)            
                valueAbove = sumTable(iRowAbove, iColumnActual);
    
                sumTable(iRowActual, iColumnActual) = valueAbove;

        % knapsack Capacity bigger than item capacity
            else            
                valueItem = item.Value(iRowAbove);
                columnCapShift = iColumnActual-item.Capacity(iRowAbove);
                valueDiagonal = sumTable(iRowAbove, columnCapShift);
    
                sumTable(iRowActual, iColumnActual) = valueItem + valueDiagonal;    
            end
        end
    end

valueMax = sumTable(length(item.Capacity) + 1,knapsackCapacity);


%% choosing most suitable items by evaluating the table
columnActual = knapsackCapacity + 1;
items = linspace(itemCount+1,2,itemCount);
for jRowActual = items
    jRowAbove = jRowActual-1;

    if sumTable(jRowActual, columnActual) > sumTable(jRowAbove, columnActual)
        itemsPicked(end+1) = jRowActual-1;
        columnActual = columnActual - item.Capacity(jRowActual-1);
    end
end

end